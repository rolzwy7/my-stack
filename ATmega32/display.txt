#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>

#define DEFSEC_ConfigPortAsOutput(PortName, InitVal) DDR ## PortName=0xff;\
													 PORT ## PortName=InitVal;

#define DEFSEC_ConfigPortPinAsOutput(PortName, PinNo) DDR ## PortName|=(1<<PinNo);
#define DEFSIG_LCD_E_Low		PORTA&=~(1<<PA0)
#define DEFSIG_LCD_E_High		PORTA|=(1<<PA0)
#define DEFSIG_LCD_RS_Command	PORTA&=~(1<<PA1)
#define DEFSIG_LCD_RS_Data		PORTA|=(1<<PA1)

#define DEFCMD_LCD_FunctionSet	(1<<5)
#define DEFSET_LCD_DataLength8	(1<<4)
#define DEFSET_LCD_2Lines		(1<<3)
#define DEFSET_LCD_FontSize5x8	(0<<2)

#define DEFCMD_LCD_DisplayControl	(1<<3)
#define DEFSET_LCD_DisplayOn		(1<<2)
#define DEFSET_LCD_CursorOff		(0<<1)
#define DEFSET_LCD_CursorOn			(1<<1)
#define DEFSET_LCD_BlinkingOff		(0<<0)
#define DEFSET_LCD_BlinkingOn		(1<<0)
#define DEFCMD_LCD_ClearDisplay		(1<<0)
#define DEFCMD_LCD_ReturnHome		(1<<1)

#define DEFCMD_LCD_EntryMode		(1<<2)
#define DEFSET_LCD_CursorMoveDirInc	(1<<1)
#define DEFSET_LCD_CursorMoveDirDec	(0<<1)

#define DEFCMD_LCD_SetDDRAMAddress	(1<<7)

#define DEFCMD_LCD_CurDispShift		(1<<4)
#define DEFSET_LCD_DisplayShift		(1<<3)
#define DEFSET_LCD_CursorShift		(0<<3)
#define DEFSET_LCD_ShiftLeft		(0<<2)
#define DEFSET_LCD_ShiftRight		(1<<2)

#define DEFCMD_LCD_SetCGRAMAddress	(1<<6)

uint8_t VAR_String1[] = "Hello world, I'm a student";
uint8_t VAR_String2[] = "Czesc, ja jestem studentem";

#define DEFVAL_CharSi	0

const uint8_t
		Const_CharSi[8] = {
				0b00000000,
				0b00000100,
				0b00101110,
				0b01000000,
				0b00111110,
				0b00000001,
				0b00111110,
				0b00000000
			};

void Fun_LCD_Write(uint8_t ParByte){
	PORTB = ParByte; 
	DEFSIG_LCD_E_High;
	_delay_us(10);
	DEFSIG_LCD_E_Low;
}


void Fun_LCD_init(void){
	// interface configuration
	DEFSEC_ConfigPortAsOutput(B, 0);
	DEFSEC_ConfigPortPinAsOutput(A, 0);
	DEFSEC_ConfigPortPinAsOutput(A, 1);	
	DEFSIG_LCD_E_Low;
	// reset sequence
	DEFSIG_LCD_RS_Command;
	_delay_ms(41);
	Fun_LCD_Write(0b00110000);
	_delay_ms(5);
	Fun_LCD_Write(0b00110000);
	_delay_us(110);
	Fun_LCD_Write(0b00110000);
	_delay_us(110);
	// display configuration
	DEFSIG_LCD_RS_Command;
	Fun_LCD_Write(
		DEFCMD_LCD_FunctionSet
		|DEFSET_LCD_DataLength8
		|DEFSET_LCD_2Lines
		|DEFSET_LCD_FontSize5x8
	);
	_delay_us(40);
	Fun_LCD_Write(
		DEFCMD_LCD_DisplayControl
		|DEFSET_LCD_DisplayOn
		|DEFSET_LCD_CursorOff
		|DEFSET_LCD_BlinkingOff
	);
	_delay_us(40);
	Fun_LCD_Write(DEFCMD_LCD_ClearDisplay);
	_delay_us(40);
	Fun_LCD_Write(DEFCMD_LCD_ReturnHome);
	_delay_ms(2);
	Fun_LCD_Write(
		DEFCMD_LCD_EntryMode
		|DEFSET_LCD_CursorMoveDirInc
	);
	_delay_us(40);
	Fun_LCD_Write(DEFCMD_LCD_SetDDRAMAddress|0x00);
	_delay_us(40);
}

void Fun_DisplayStringAtPosition(
	uint8_t* Par_Ptr,
	uint8_t Par_ByteCount,
	int8_t Par_Line,
	int8_t Par_Position
){
	// cursor position
	if((Par_Line != -1) && (Par_Position != -1)){
		DEFSIG_LCD_RS_Command;
		Fun_LCD_Write(DEFCMD_LCD_SetDDRAMAddress
			|((Par_Line==1?0x00:0x40)+Par_Position));
		_delay_us(40);
	}
	// content sending
	DEFSIG_LCD_RS_Data;
	while (Par_ByteCount--) {
		Fun_LCD_Write(*(Par_Ptr++));
		_delay_us(40);
	}
	// 
	//Fun_LCD_Write(*Par_Ptr);
}

void Fun_LCD_ShiftDisplayWindow(uint8_t Par_Direction) {
	DEFSIG_LCD_RS_Command;
	Fun_LCD_Write(
		DEFCMD_LCD_CurDispShift
		|DEFSET_LCD_DisplayShift
		|Par_Direction
	);
	_delay_us(40);
}

void Fun_WriteCharFontToCGRAM(const uint8_t* ParPattern, uint8_t ParAddr) {
	DEFSIG_LCD_RS_Command;
	Fun_LCD_Write(
		DEFCMD_LCD_SetCGRAMAddress | (ParAddr << 3)
	);
	_delay_us(40);
	DEFSIG_LCD_RS_Data;
	uint8_t LocVar_Index;
	for(LocVar_Index = 0; LocVar_Index<8; LocVar_Index++){
		Fun_LCD_Write(ParPattern[LocVar_Index]);
		_delay_us(40);
	}
}

int main(void) {
	Fun_LCD_init();
	Fun_WriteCharFontToCGRAM(Const_CharSi, DEFVAL_CharSi);
	Fun_DisplayStringAtPosition(VAR_String1, 26, 1, 0);
	Fun_DisplayStringAtPosition(VAR_String2, 26, 2, 0);
    while (1) {
		uint8_t LocVar_ShiftIndex;
		
		for (LocVar_ShiftIndex = 0; LocVar_ShiftIndex<10; LocVar_ShiftIndex++) {
			Fun_LCD_ShiftDisplayWindow(DEFSET_LCD_ShiftLeft);
			_delay_ms(1000);
		}
		for (LocVar_ShiftIndex = 0; LocVar_ShiftIndex<10; LocVar_ShiftIndex++) {
			Fun_LCD_ShiftDisplayWindow(DEFSET_LCD_ShiftRight);
			_delay_ms(1000);
		}
	}
}