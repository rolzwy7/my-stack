// analog channel on pin PA0
#define F_CPU 16000000
#include <avr/io.h>
#include <util/delay.h>
#include <avr/interrupt.h>
#include "module_LCD.h"


char VAR_String_Low[3] = "Low";

char VAR_String_High[4] = "High";
char VAR_String_Unknown[7] = "Unknown";
char VAR_String_Reset3[3] = "   ";
char VAR_String_Reset4[4] = "    ";

char VAR_String_Zmienny[10] = "zmienny   ";
char VAR_String_Niezmienny[10] = "niezmienny";

char VAR_States[10] = "XXXXXXXXXX";
char VAR_CurrState[1] = "X";

volatile uint8_t counter = 0;
uint8_t changed = 0;
uint8_t was_low = 0;
uint8_t was_high = 0;

char
	VAR_String1[5];
volatile uint8_t
	VAR_Flag_NewData = 0;
uint16_t
	VAR_ADC_Code = 0;
float
	VAR_Voltage = 0.0;
	
void Fun_ADCCode2String (uint16_t ParCode, char* ParStringPtr)	{

	*ParStringPtr++ = (ParCode / 10000) + '0'; ParCode %= 10000;
	*ParStringPtr++ = (ParCode / 1000) + '0'; ParCode %= 1000;
	*ParStringPtr++ = (ParCode / 100)  + '0'; ParCode %= 100;
	*ParStringPtr++ = (ParCode / 10)   + '0'; ParCode %= 10;
	*ParStringPtr++ = (ParCode)        + '0';
}

void Fun_Voltage2String (float ParVoltage, char* ParStringPtr) {
	uint16_t
		LocVar_UInt;

	LocVar_UInt = (uint16_t)(ParVoltage*1000.0);
	*ParStringPtr++ = (LocVar_UInt / 1000) + '0'; LocVar_UInt %= 1000;
	*ParStringPtr++ = '.';
	*ParStringPtr++ = (LocVar_UInt / 100)  + '0'; LocVar_UInt %= 100;
	*ParStringPtr++ = (LocVar_UInt / 10)   + '0'; LocVar_UInt %= 10;
	*ParStringPtr++ = (LocVar_UInt)        + '0';
	
}

void Fun_ADC_Init (void) {
	
	DDRA &= ~(1<<PA0);	// setting pin PA0 as a input
	ADMUX = (1<<REFS1) | (1<<REFS0)	// internal 2.56V voltage reference source
		  | (1<<ADLAR)				// adjusting result to left
		  |	(0<<MUX4) | (0<<MUX3) | (0<<MUX2) | (0<<MUX1) |	(0<<MUX0); // channel 0
	ADCSRA = (1<<ADEN)
		   | (1<<ADIE) // interrupt enable
		   | (1<<ADATE)	// Auto trigger enable
		   | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);	// pre-scaler 128
	SFIOR |= (1<<ADTS2) | (0<<ADTS1) | (1<<ADTS0);	// Timer/Counter1 compare match B
	TCCR1A = (0<<COM1A1) | (0<<COM1A0) | (0<<COM1B1) | (0<<COM1B0)
		   | (0<<FOC1A) | (0<<FOC1B) | (0<<WGM11) | (0<<WGM10);	// mode 4 - CTC, OCRA (OCRB)
	TCCR1B = (0<<WGM13) | (1<<WGM12) | (1<<CS12) | (0<<CS11) | (1<<CS10); // pre-scaler 1024
	OCR1B = OCR1A = (F_CPU/1024L); // duration 1 second // /2 -> 0.5s  | *1 -> 1s 
}

void Fun_ADC_StartConversion (void)	{
	ADCSRA |= (1<<ADSC);
}


int main(void)
{
	Fun_LCD_Init();
	//Fun_DisplayStringAtPossition ("Logic", 5, 1, 0);
	Fun_DisplayStringAtPossition ("level:", 6, 2, 0);
	//Fun_DisplayStringAtPossition ("ADCcode:", 8, 1, 0);
	//Fun_DisplayStringAtPossition ("Voltage:", 8, 2, 0);

	Fun_ADC_Init ();
	sei();
		
	while (1) {
		if (VAR_Flag_NewData)	{
			Fun_ADCCode2String (VAR_ADC_Code, VAR_String1);
			//Fun_DisplayStringAtPossition (VAR_String1, 5, 1, 9);
			VAR_Voltage = 2.56 * (float)VAR_ADC_Code / (float) UINT16_MAX;
			
			Fun_Voltage2String (VAR_Voltage, VAR_String1);
			//Fun_DisplayStringAtPossition (VAR_String1, 5, 2, 9);
			
			Fun_DisplayStringAtPossition (VAR_String1, 5, 1, 0); // debug 7
			//Fun_DisplayStringAtPossition (VAR_States, 10, 1, 5); // debug
			
			
			Fun_DisplayStringAtPossition (VAR_String_Zmienny, 10, 1, 6); // debug 7
			
			changed = 0;
			was_low = 0;
			was_high = 0;
			for(uint8_t it = 0; it<10; ++it) {
				if(VAR_States[it] == 'L') {was_low = 1;}
				if(VAR_States[it] == 'H') {was_high = 1;}
			}
			
			if(was_low == 1 && was_high == 1) {
				Fun_DisplayStringAtPossition (VAR_String_Zmienny, 10, 1, 6); // debug 7
			} else {
				Fun_DisplayStringAtPossition (VAR_String_Niezmienny, 10, 1, 6); // debug 7
			}
			
			if(VAR_Voltage >= 0 && VAR_Voltage < 0.5) {
				Fun_DisplayStringAtPossition (VAR_String_Low, 3, 2, 7);	
				Fun_DisplayStringAtPossition (VAR_String_Reset4, 4, 2, 7+3);
				VAR_CurrState[0] = 'L';
				
			} else if(VAR_Voltage >= 0.5 && VAR_Voltage < 2.0) {
				Fun_DisplayStringAtPossition (VAR_String_Unknown, 7, 2, 7);
				
			} else if(VAR_Voltage >= 2.0) {
				Fun_DisplayStringAtPossition (VAR_String_High, 4, 2, 7);
				Fun_DisplayStringAtPossition (VAR_String_Reset3, 3, 2, 7+4);
				VAR_CurrState[0] = 'H';
			}
	
			VAR_Flag_NewData = 0;
		}
	}
	return 0;
}


ISR (ADC_vect)			
{
	
	VAR_States[counter] = VAR_CurrState[0];
	if(counter == 9) {counter=0;} else {counter+=1;}

	VAR_ADC_Code = ADC;
	VAR_Flag_NewData = 1;	
	TIFR &= ~(1<<OCF1A);

}